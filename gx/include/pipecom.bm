' Source: Spriggy's API Collection
'         https://github.com/SpriggsySpriggs/Spriggsys-API-Collection/blob/master/Cross-Platform%20(Windows%2C%20Macintosh%2C%20Linux)/pipecomqb64.bas
' ----------------------------------------------------------------------------
FUNCTION pipecom& (cmd AS STRING, stdout AS STRING, stderr AS STRING)
    $IF WIN THEN
        TYPE SECURITY_ATTRIBUTES
            nLength AS LONG
            $IF 64BIT THEN
                padding AS LONG
            $END IF
            lpSecurityDescriptor AS _OFFSET
            bInheritHandle AS LONG
            $IF 64BIT THEN
                padding2 AS LONG
            $END IF
        END TYPE

        TYPE STARTUPINFO
            cb AS LONG
            $IF 64BIT THEN
                padding AS LONG
            $END IF
            lpReserved AS _OFFSET
            lpDesktop AS _OFFSET
            lpTitle AS _OFFSET
            dwX AS LONG
            dwY AS LONG
            dwXSize AS LONG
            dwYSize AS LONG
            dwXCountChars AS LONG
            dwYCountChars AS LONG
            dwFillAttribute AS LONG
            dwFlags AS LONG
            wShowWindow AS INTEGER
            cbReserved2 AS INTEGER
            $IF 64BIT THEN
                padding2 AS LONG
            $END IF
            lpReserved2 AS _OFFSET
            hStdInput AS _OFFSET
            hStdOutput AS _OFFSET
            hStdError AS _OFFSET
        END TYPE

        TYPE PROCESS_INFORMATION
            hProcess AS _OFFSET
            hThread AS _OFFSET
            dwProcessId AS LONG
            $IF 64BIT THEN
                padding2 AS LONG
            $END IF
        END TYPE

        CONST STARTF_USESTDHANDLES = &H00000100
        CONST CREATE_NO_WINDOW = &H8000000

        CONST INFINITE = 4294967295
        CONST WAIT_FAILED = &HFFFFFFFF

        DECLARE DYNAMIC LIBRARY "Kernel32"
            FUNCTION CreatePipe% (BYVAL hReadPipe AS _OFFSET, BYVAL hWritePipe AS _OFFSET, BYVAL lpPipeAttributes AS _OFFSET, BYVAL nSize AS LONG)
            FUNCTION CreateProcess% ALIAS CreateProcessA (BYVAL lpApplicationName AS _OFFSET, BYVAL lpCommandLine AS _OFFSET, BYVAL lpProcessAttributes AS _OFFSET, BYVAL lpThreadAttributes AS _OFFSET, BYVAL bInheritHandles AS INTEGER, BYVAL dwCreationFlags AS LONG, BYVAL lpEnvironment AS _OFFSET, BYVAL lpCurrentDirectory AS _OFFSET, BYVAL lpStartupInfor AS _OFFSET, BYVAL lpProcessInformation AS _OFFSET)
            FUNCTION CloseHandle% (BYVAL hObject AS _OFFSET)
            FUNCTION ReadFile% (BYVAL hFile AS _OFFSET, BYVAL lpBuffer AS _OFFSET, BYVAL nNumberOfBytesToRead AS LONG, BYVAL lpNumberOfBytesRead AS _OFFSET, BYVAL lpOverlapped AS _OFFSET)
            FUNCTION GetExitCodeProcess% (BYVAL hProcess AS _OFFSET, BYVAL lpExitCode AS _OFFSET)
            FUNCTION WaitForSingleObject& (BYVAL hHandle AS _OFFSET, BYVAL dwMilliseconds AS LONG)
        END DECLARE

        DIM ok AS INTEGER: ok = 1
        DIM hStdOutPipeRead AS _OFFSET
        DIM hStdOutPipeWrite AS _OFFSET
        DIM hStdReadPipeError AS _OFFSET
        DIM hStdOutPipeError AS _OFFSET
        DIM sa AS SECURITY_ATTRIBUTES: sa.nLength = LEN(sa): sa.lpSecurityDescriptor = 0: sa.bInheritHandle = 1

        IF CreatePipe(_OFFSET(hStdOutPipeRead), _OFFSET(hStdOutPipeWrite), _OFFSET(sa), 0) = 0 THEN
            pipecom = -1
            EXIT FUNCTION
        END IF

        IF CreatePipe(_OFFSET(hStdReadPipeError), _OFFSET(hStdOutPipeError), _OFFSET(sa), 0) = 0 THEN
            pipecom = -1
            EXIT FUNCTION
        END IF

        DIM si AS STARTUPINFO
        si.cb = LEN(si)
        si.dwFlags = STARTF_USESTDHANDLES
        si.hStdError = hStdOutPipeError
        si.hStdOutput = hStdOutPipeWrite
        si.hStdInput = 0
        DIM pi AS PROCESS_INFORMATION
        DIM lpApplicationName AS _OFFSET
        DIM fullcmd AS STRING: fullcmd = "cmd /c " + cmd + CHR$(0)
        DIM lpCommandLine AS STRING: lpCommandLine = fullcmd
        DIM lpProcessAttributes AS _OFFSET
        DIM lpThreadAttributes AS _OFFSET
        DIM bInheritHandles AS INTEGER: bInheritHandles = 1
        DIM dwCreationFlags AS LONG: dwCreationFlags = CREATE_NO_WINDOW
        DIM lpEnvironment AS _OFFSET
        DIM lpCurrentDirectory AS _OFFSET
        ok = CreateProcess(lpApplicationName,_
        _Offset(lpCommandLine),_
        lpProcessAttributes,_
        lpThreadAttributes,_
        bInheritHandles,_
        dwCreationFlags,_
        lpEnvironment,_
        lpCurrentDirectory,_
        _Offset(si),_
        _Offset(pi))
        IF ok = 0 THEN
            pipecom = -1
            EXIT FUNCTION
        END IF

        ok = CloseHandle(hStdOutPipeWrite)
        ok = CloseHandle(hStdOutPipeError)

        DIM buf AS STRING: buf = SPACE$(4096 + 1)
        DIM dwRead AS LONG
        WHILE ReadFile(hStdOutPipeRead, _OFFSET(buf), 4096, _OFFSET(dwRead), 0) <> 0 AND dwRead > 0
            buf = MID$(buf, 1, dwRead)
            GOSUB RemoveChr13
            stdout = stdout + buf
            buf = SPACE$(4096 + 1)
        WEND

        WHILE ReadFile(hStdReadPipeError, _OFFSET(buf), 4096, _OFFSET(dwRead), 0) <> 0 AND dwRead > 0
            buf = MID$(buf, 1, dwRead)
            GOSUB RemoveChr13
            stderr = stderr + buf
            buf = SPACE$(4096 + 1)
        WEND

        DIM exit_code AS LONG
        DIM ex_stat AS LONG
        IF WaitForSingleObject(pi.hProcess, INFINITE) <> WAIT_FAILED THEN
            IF GetExitCodeProcess(pi.hProcess, _OFFSET(exit_code)) THEN
                ex_stat = 1
            END IF
        END IF

        ok = CloseHandle(hStdOutPipeRead)
        ok = CloseHandle(hStdReadPipeError)
        IF ex_stat = 1 THEN
            pipecom = exit_code
        ELSE
            pipecom = -1
        END IF

        EXIT FUNCTION

        RemoveChr13:
        DIM j AS LONG
        j = INSTR(buf, CHR$(13))
        DO WHILE j
            buf = LEFT$(buf, j - 1) + MID$(buf, j + 1)
            j = INSTR(buf, CHR$(13))
        LOOP
        RETURN
    $ELSE
        Declare CustomType Library
        Function popen%& (cmd As String, readtype As String)
        Function feof& (ByVal stream As _Offset)
        Function fgets$ (str As String, Byval n As Long, Byval stream As _Offset)
        Function pclose& (ByVal stream As _Offset)
        Function fclose& (ByVal stream As _Offset)
        End Declare

        Declare Library
        Function WEXITSTATUS& (ByVal stat_val As Long)
        End Declare

        Dim pipecom_buffer As String
        Dim stream As _Offset

        Dim buffer As String * 4096
        If _FileExists("pipestderr") Then
        Kill "pipestderr"
        End If
        stream = popen(cmd + " 2>pipestderr", "r")
        If stream Then
        While feof(stream) = 0
        If fgets(buffer, 4096, stream) <> "" And feof(stream) = 0 Then
        stdout = stdout + Mid$(buffer, 1, InStr(buffer, Chr$(0)) - 1)
        End If
        Wend
        Dim status As Long
        Dim exit_code As Long
        status = pclose(stream)
        exit_code = WEXITSTATUS(status)
        If _FileExists("pipestderr") Then
        Dim errfile As Integer
        errfile = FreeFile
        Open "pipestderr" For Binary As #errfile
        If LOF(1) > 0 Then
        stderr = Space$(LOF(1))
        Get #errfile, , stderr
        End If
        Close #errfile
        Kill "pipestderr"
        End If
        pipecom = exit_code
        Else
        pipecom = -1
        End If
    $END IF
END FUNCTION

FUNCTION pipecom_lite$ (cmd AS STRING)
    DIM a AS LONG
    DIM stdout AS STRING, stderr AS STRING
    a = pipecom(cmd, stdout, stderr)
    pipecom_lite$ = stdout
END FUNCTION
